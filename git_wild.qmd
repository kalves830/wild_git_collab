---
title: "Wild Git Collaboration Practice"
format: 
  html:
    code-fold: show
execute: 
  warning: false
  message: false
---


#load libraries
```{r}
library(ggplot2)
library(janitor)
library(tidyverse)
```


## STEP 5: No merge conflicts!

```{r partner 1}
### In this code chunk, start with the diamonds dataset (built in to
### ggplot2 package) and create a plot of price vs. carat (or some other
### variables of your choice)
data("diamonds")

expl_diam <- ggplot(diamonds, aes(x=price, y=carat)) +
  geom_point()+
  labs(title = "Price vs. Carat",
       x = "Price",
       y = "Carat") +
  theme_minimal()

expl_diam
```

```{r partner 2}
### In this code chunk, start with the diamonds dataset (built in to
### ggplot2 package) and create a subset based on filtering, e.g., 
### size greater than 1 carat or cut is "Ideal"

library(ggplot2)
library(tidyverse)

diamond_mod <- diamonds |>
  filter(carat > 1 | cut == "Ideal")

```

## STEP 7: Uh oh, merge conflicts!

```{r break-it-1}

### Both partners - delete this comment, then write some code here
### to plot, summarize, calculate something simple using the diamonds
### dataset.

kyles_ideal_diamond <- diamonds |>
  filter(carat > 3 & price > 3000 & cut == "Premium" & color == "E")


diam_data <- diamonds |>
  pivot_longer(names_to = "name", values_to = "values", where(is.numeric)) |>
  drop_na()

```

## STEP 11: And even more merge conflicts!

```{r break-it-2}
sam_made_me_do_this_histogram <- ggplot(diam_data, aes(x=values, fill = "lightpink")) +
  geom_histogram()+
  facet_wrap(~name, scales = "free_x")

sam_made_me_do_this_histogram

```

